"""Initial schema with users, scans, policies

Revision ID: 0e4c34798957
Revises: 
Create Date: 2025-10-24 20:17:39.128265

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0e4c34798957'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('scan',
    sa.Column('name', sa.String(length=200), nullable=False, comment='Human-readable name for the scan'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description of the scan purpose'),
    sa.Column('scan_type', sa.Enum('GOOGLE_CLOUD_IAM', 'GOOGLE_WORKSPACE', 'COMPREHENSIVE', name='scantype'), nullable=False, comment='Type of scan being performed'),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', 'TIMEOUT', name='scanstatus'), nullable=False, comment='Current status of the scan'),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='scanpriority'), nullable=False, comment='Priority level of the scan'),
    sa.Column('config', sa.JSON(), nullable=True, comment='Scan configuration parameters in JSON format'),
    sa.Column('target_scope', sa.Text(), nullable=True, comment='Target scope description (subscription, project, etc.)'),
    sa.Column('target_resource_id', sa.String(length=500), nullable=True, comment='Identifier of the target resource being scanned'),
    sa.Column('credentials_used', sa.String(length=100), nullable=True, comment='Type of credentials used for the scan'),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=True, comment='Scheduled start time for the scan'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='Actual start time of the scan'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='Completion time of the scan'),
    sa.Column('duration_seconds', sa.Integer(), nullable=True, comment='Total duration of the scan in seconds'),
    sa.Column('timeout_seconds', sa.Integer(), nullable=True, comment='Maximum allowed duration in seconds'),
    sa.Column('progress_percentage', sa.Float(), nullable=False, comment='Progress percentage (0-100)'),
    sa.Column('current_step', sa.String(length=200), nullable=True, comment='Current step being processed'),
    sa.Column('total_steps', sa.Integer(), nullable=True, comment='Total number of steps in the scan'),
    sa.Column('completed_steps', sa.Integer(), nullable=True, comment='Number of completed steps'),
    sa.Column('total_policies_scanned', sa.Integer(), nullable=True, comment='Total number of policies scanned'),
    sa.Column('total_resources_analyzed', sa.Integer(), nullable=True, comment='Total number of resources analyzed'),
    sa.Column('total_findings', sa.Integer(), nullable=True, comment='Total number of findings identified'),
    sa.Column('critical_findings', sa.Integer(), nullable=True, comment='Number of critical severity findings'),
    sa.Column('high_findings', sa.Integer(), nullable=True, comment='Number of high severity findings'),
    sa.Column('medium_findings', sa.Integer(), nullable=True, comment='Number of medium severity findings'),
    sa.Column('low_findings', sa.Integer(), nullable=True, comment='Number of low severity findings'),
    sa.Column('risk_score', sa.Float(), nullable=True, comment='Overall risk score (0-100)'),
    sa.Column('compliance_score', sa.Float(), nullable=True, comment='Overall compliance score (0-100)'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if scan failed'),
    sa.Column('error_details', sa.JSON(), nullable=True, comment='Detailed error information in JSON format'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts'),
    sa.Column('max_retries', sa.Integer(), nullable=False, comment='Maximum number of retry attempts'),
    sa.Column('tags', sa.JSON(), nullable=True, comment='Tags for categorizing and filtering scans'),
    sa.Column('scan_metadata', sa.JSON(), nullable=True, comment='Additional metadata in JSON format'),
    sa.Column('external_scan_id', sa.String(length=200), nullable=True, comment='External scan identifier from scanning tools'),
    sa.Column('parent_scan_id', sa.UUID(), nullable=True, comment='ID of parent scan if this is a sub-scan'),
    sa.Column('created_by', sa.UUID(), nullable=False, comment='ID of user who initiated the scan'),
    sa.Column('is_recurring', sa.Boolean(), nullable=False, comment='Whether this is a recurring scan'),
    sa.Column('is_baseline', sa.Boolean(), nullable=False, comment='Whether this scan serves as a baseline'),
    sa.Column('notify_on_completion', sa.Boolean(), nullable=False, comment='Whether to notify on scan completion'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft deleted'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic locking'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scan_completed_at'), 'scan', ['completed_at'], unique=False)
    op.create_index(op.f('ix_scan_compliance_score'), 'scan', ['compliance_score'], unique=False)
    op.create_index(op.f('ix_scan_created_at'), 'scan', ['created_at'], unique=False)
    op.create_index(op.f('ix_scan_created_by'), 'scan', ['created_by'], unique=False)
    op.create_index(op.f('ix_scan_deleted_at'), 'scan', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_scan_external_scan_id'), 'scan', ['external_scan_id'], unique=False)
    op.create_index(op.f('ix_scan_id'), 'scan', ['id'], unique=False)
    op.create_index(op.f('ix_scan_name'), 'scan', ['name'], unique=False)
    op.create_index(op.f('ix_scan_parent_scan_id'), 'scan', ['parent_scan_id'], unique=False)
    op.create_index(op.f('ix_scan_priority'), 'scan', ['priority'], unique=False)
    op.create_index(op.f('ix_scan_risk_score'), 'scan', ['risk_score'], unique=False)
    op.create_index(op.f('ix_scan_scan_type'), 'scan', ['scan_type'], unique=False)
    op.create_index(op.f('ix_scan_scheduled_at'), 'scan', ['scheduled_at'], unique=False)
    op.create_index(op.f('ix_scan_started_at'), 'scan', ['started_at'], unique=False)
    op.create_index(op.f('ix_scan_status'), 'scan', ['status'], unique=False)
    op.create_index(op.f('ix_scan_target_resource_id'), 'scan', ['target_resource_id'], unique=False)
    op.create_index(op.f('ix_scan_updated_at'), 'scan', ['updated_at'], unique=False)
    op.create_table('user',
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's email address (unique identifier)"),
    sa.Column('username', sa.String(length=100), nullable=False, comment='Unique username for login'),
    sa.Column('password_hash', sa.String(length=255), nullable=True, comment='Hashed password (null for external auth providers)'),
    sa.Column('auth_provider', sa.Enum('LOCAL', 'MICROSOFT', 'GOOGLE', 'SAML', name='authenticationprovider'), nullable=False, comment='Authentication provider used by the user'),
    sa.Column('provider_id', sa.String(length=255), nullable=True, comment='Unique identifier from external auth provider'),
    sa.Column('first_name', sa.String(length=100), nullable=True, comment="User's first name"),
    sa.Column('last_name', sa.String(length=100), nullable=True, comment="User's last name"),
    sa.Column('display_name', sa.String(length=200), nullable=True, comment='Display name for UI purposes'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment="URL to user's avatar image"),
    sa.Column('phone_number', sa.String(length=20), nullable=True, comment="User's phone number"),
    sa.Column('department', sa.String(length=100), nullable=True, comment="User's department or organization unit"),
    sa.Column('job_title', sa.String(length=100), nullable=True, comment="User's job title"),
    sa.Column('role', sa.Enum('ADMIN', 'ANALYST', 'VIEWER', 'AUDITOR', name='userrole'), nullable=False, comment="User's role for access control"),
    sa.Column('permissions', sa.Text(), nullable=True, comment='Additional permissions in JSON format'),
    sa.Column('is_superuser', sa.Boolean(), nullable=False, comment='Whether user has superuser privileges'),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_VERIFICATION', 'LOCKED', name='userstatus'), nullable=False, comment='Current status of the user account'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment="Whether user's email is verified"),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether user account is active'),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False, comment='Number of consecutive failed login attempts'),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of last successful login'),
    sa.Column('last_login_ip', sa.String(length=45), nullable=True, comment='IP address of last login'),
    sa.Column('last_password_change', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of last password change'),
    sa.Column('password_expires_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when password expires'),
    sa.Column('must_change_password', sa.Boolean(), nullable=False, comment='Whether user must change password on next login'),
    sa.Column('two_factor_enabled', sa.Boolean(), nullable=False, comment='Whether two-factor authentication is enabled'),
    sa.Column('two_factor_secret', sa.String(length=255), nullable=True, comment='Two-factor authentication secret'),
    sa.Column('backup_codes', sa.Text(), nullable=True, comment='Backup codes for two-factor authentication'),
    sa.Column('session_token', sa.String(length=255), nullable=True, comment='Current active session token'),
    sa.Column('refresh_token', sa.String(length=255), nullable=True, comment='Refresh token for session management'),
    sa.Column('token_expires_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when current token expires'),
    sa.Column('notes', sa.Text(), nullable=True, comment='Administrative notes about the user'),
    sa.Column('created_by', sa.UUID(), nullable=True, comment='ID of user who created this account'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft deleted'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic locking'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_created_at'), 'user', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_created_by'), 'user', ['created_by'], unique=False)
    op.create_index(op.f('ix_user_deleted_at'), 'user', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_index(op.f('ix_user_is_active'), 'user', ['is_active'], unique=False)
    op.create_index(op.f('ix_user_last_login_at'), 'user', ['last_login_at'], unique=False)
    op.create_index(op.f('ix_user_provider_id'), 'user', ['provider_id'], unique=False)
    op.create_index(op.f('ix_user_role'), 'user', ['role'], unique=False)
    op.create_index(op.f('ix_user_session_token'), 'user', ['session_token'], unique=False)
    op.create_index(op.f('ix_user_status'), 'user', ['status'], unique=False)
    op.create_index(op.f('ix_user_updated_at'), 'user', ['updated_at'], unique=False)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('policy',
    sa.Column('name', sa.String(length=300), nullable=False, comment='Policy name or identifier'),
    sa.Column('display_name', sa.String(length=300), nullable=True, comment='Human-readable display name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Policy description'),
    sa.Column('source', sa.Enum('MICROSOFT_ENTRA', 'GOOGLE_CLOUD_IAM', 'AWS_IAM', 'AZURE_AD', 'CUSTOM', name='policysource'), nullable=False, comment='Source system where the policy originates'),
    sa.Column('policy_type', sa.Enum('IDENTITY', 'ACCESS', 'ROLE', 'PERMISSION', 'CONDITION', 'RESOURCE_BASED', name='policytype'), nullable=False, comment='Type of policy'),
    sa.Column('effect', sa.Enum('ALLOW', 'DENY', 'CONDITIONAL', name='policyeffect'), nullable=True, comment='Effect of the policy (allow/deny)'),
    sa.Column('policy_content', sa.JSON(), nullable=True, comment='Raw policy content in JSON format'),
    sa.Column('policy_document', sa.Text(), nullable=True, comment='Policy document as text'),
    sa.Column('conditions', sa.JSON(), nullable=True, comment='Policy conditions in JSON format'),
    sa.Column('resource_id', sa.String(length=500), nullable=True, comment='Resource identifier this policy applies to'),
    sa.Column('resource_type', sa.String(length=100), nullable=True, comment='Type of resource this policy applies to'),
    sa.Column('scope', sa.String(length=500), nullable=True, comment='Scope of the policy (subscription, project, etc.)'),
    sa.Column('principal_id', sa.String(length=500), nullable=True, comment='Principal identifier (user, group, service account)'),
    sa.Column('principal_type', sa.String(length=50), nullable=True, comment='Type of principal (user, group, service account)'),
    sa.Column('risk_level', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='risklevel'), nullable=False, comment='Risk level assessment'),
    sa.Column('risk_score', sa.Float(), nullable=False, comment='Risk score (0-100)'),
    sa.Column('compliance_status', sa.Enum('COMPLIANT', 'NON_COMPLIANT', 'PARTIALLY_COMPLIANT', 'UNKNOWN', name='compliancestatus'), nullable=False, comment='Compliance status'),
    sa.Column('compliance_score', sa.Float(), nullable=False, comment='Compliance score (0-100)'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Policy category'),
    sa.Column('subcategory', sa.String(length=100), nullable=True, comment='Policy subcategory'),
    sa.Column('tags', sa.JSON(), nullable=True, comment='Policy tags for categorization'),
    sa.Column('permissions', sa.JSON(), nullable=True, comment='List of permissions granted by this policy'),
    sa.Column('actions', sa.JSON(), nullable=True, comment='List of actions allowed/denied by this policy'),
    sa.Column('resources', sa.JSON(), nullable=True, comment='List of resources affected by this policy'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the policy is currently active'),
    sa.Column('is_enforced', sa.Boolean(), nullable=False, comment='Whether the policy is enforced'),
    sa.Column('is_system_managed', sa.Boolean(), nullable=False, comment='Whether the policy is system-managed'),
    sa.Column('is_inherited', sa.Boolean(), nullable=False, comment='Whether the policy is inherited from a parent scope'),
    sa.Column('external_id', sa.String(length=500), nullable=True, comment='External policy identifier from source system'),
    sa.Column('external_version', sa.String(length=100), nullable=True, comment='External policy version'),
    sa.Column('parent_policy_id', sa.UUID(), nullable=True, comment='ID of parent policy if this is derived'),
    sa.Column('last_analyzed_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when policy was last analyzed'),
    sa.Column('analysis_version', sa.String(length=50), nullable=True, comment='Version of analysis performed'),
    sa.Column('findings_count', sa.Integer(), nullable=False, comment='Number of findings associated with this policy'),
    sa.Column('recommendations_count', sa.Integer(), nullable=False, comment='Number of recommendations for this policy'),
    sa.Column('created_by', sa.String(length=200), nullable=True, comment='Creator of the policy'),
    sa.Column('approved_by', sa.String(length=200), nullable=True, comment='Approver of the policy'),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True, comment='Approval timestamp'),
    sa.Column('review_required', sa.Boolean(), nullable=False, comment='Whether policy requires review'),
    sa.Column('next_review_date', sa.DateTime(timezone=True), nullable=True, comment='Next scheduled review date'),
    sa.Column('policy_metadata', sa.JSON(), nullable=True, comment='Additional metadata in JSON format'),
    sa.Column('scan_id', sa.UUID(), nullable=False, comment='ID of the scan that discovered this policy'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft deleted'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic locking'),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_policy_category'), 'policy', ['category'], unique=False)
    op.create_index(op.f('ix_policy_compliance_score'), 'policy', ['compliance_score'], unique=False)
    op.create_index(op.f('ix_policy_compliance_status'), 'policy', ['compliance_status'], unique=False)
    op.create_index(op.f('ix_policy_created_at'), 'policy', ['created_at'], unique=False)
    op.create_index(op.f('ix_policy_deleted_at'), 'policy', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_policy_effect'), 'policy', ['effect'], unique=False)
    op.create_index(op.f('ix_policy_external_id'), 'policy', ['external_id'], unique=False)
    op.create_index(op.f('ix_policy_id'), 'policy', ['id'], unique=False)
    op.create_index(op.f('ix_policy_is_active'), 'policy', ['is_active'], unique=False)
    op.create_index(op.f('ix_policy_last_analyzed_at'), 'policy', ['last_analyzed_at'], unique=False)
    op.create_index(op.f('ix_policy_name'), 'policy', ['name'], unique=False)
    op.create_index(op.f('ix_policy_next_review_date'), 'policy', ['next_review_date'], unique=False)
    op.create_index(op.f('ix_policy_parent_policy_id'), 'policy', ['parent_policy_id'], unique=False)
    op.create_index(op.f('ix_policy_policy_type'), 'policy', ['policy_type'], unique=False)
    op.create_index(op.f('ix_policy_principal_id'), 'policy', ['principal_id'], unique=False)
    op.create_index(op.f('ix_policy_resource_id'), 'policy', ['resource_id'], unique=False)
    op.create_index(op.f('ix_policy_resource_type'), 'policy', ['resource_type'], unique=False)
    op.create_index(op.f('ix_policy_risk_level'), 'policy', ['risk_level'], unique=False)
    op.create_index(op.f('ix_policy_risk_score'), 'policy', ['risk_score'], unique=False)
    op.create_index(op.f('ix_policy_scan_id'), 'policy', ['scan_id'], unique=False)
    op.create_index(op.f('ix_policy_source'), 'policy', ['source'], unique=False)
    op.create_index(op.f('ix_policy_subcategory'), 'policy', ['subcategory'], unique=False)
    op.create_index(op.f('ix_policy_updated_at'), 'policy', ['updated_at'], unique=False)
    op.create_table('recommendation',
    sa.Column('title', sa.String(length=300), nullable=False, comment='Recommendation title'),
    sa.Column('description', sa.Text(), nullable=False, comment='Detailed description of the recommendation'),
    sa.Column('recommendation_type', sa.Enum('SECURITY_HARDENING', 'COMPLIANCE', 'BEST_PRACTICE', 'RISK_MITIGATION', 'ACCESS_CONTROL', 'MONITORING', 'GOVERNANCE', name='recommendationtype'), nullable=False, comment='Type of recommendation'),
    sa.Column('severity', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='severity'), nullable=False, comment='Severity level of the recommendation'),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='priority'), nullable=False, comment='Priority level for implementation'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Recommendation category'),
    sa.Column('subcategory', sa.String(length=100), nullable=True, comment='Recommendation subcategory'),
    sa.Column('framework', sa.String(length=100), nullable=True, comment='Security framework reference (NIST, CIS, etc.)'),
    sa.Column('control_id', sa.String(length=100), nullable=True, comment='Control identifier from security framework'),
    sa.Column('tags', sa.JSON(), nullable=True, comment='Tags for categorization and filtering'),
    sa.Column('implementation_steps', sa.JSON(), nullable=True, comment='Step-by-step implementation instructions'),
    sa.Column('remediation_code', sa.Text(), nullable=True, comment='Code snippets or commands for remediation'),
    sa.Column('rollback_procedure', sa.Text(), nullable=True, comment='Procedure to rollback changes if needed'),
    sa.Column('testing_instructions', sa.Text(), nullable=True, comment='Instructions to test the implementation'),
    sa.Column('impact_assessment', sa.Text(), nullable=True, comment='Assessment of potential impact'),
    sa.Column('risk_reduction', sa.Float(), nullable=True, comment='Estimated risk reduction percentage'),
    sa.Column('implementation_effort', sa.String(length=50), nullable=True, comment='Estimated implementation effort (low/medium/high)'),
    sa.Column('implementation_cost', sa.String(length=50), nullable=True, comment='Estimated implementation cost (low/medium/high)'),
    sa.Column('implementation_status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'REJECTED', 'DEFERRED', 'NOT_APPLICABLE', name='implementationstatus'), nullable=False, comment='Current implementation status'),
    sa.Column('assigned_to', sa.String(length=200), nullable=True, comment='Person or team assigned for implementation'),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True, comment='Due date for implementation'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when implementation was completed'),
    sa.Column('rejection_reason', sa.Text(), nullable=True, comment='Reason for rejecting the recommendation'),
    sa.Column('deferral_reason', sa.Text(), nullable=True, comment='Reason for deferring the recommendation'),
    sa.Column('deferred_until', sa.DateTime(timezone=True), nullable=True, comment='Date when deferred recommendation should be revisited'),
    sa.Column('external_reference', sa.String(length=500), nullable=True, comment='External reference or documentation link'),
    sa.Column('cve_id', sa.String(length=20), nullable=True, comment='Related CVE identifier if applicable'),
    sa.Column('business_impact', sa.Text(), nullable=True, comment='Business impact description'),
    sa.Column('business_justification', sa.Text(), nullable=True, comment='Business justification for implementation'),
    sa.Column('verification_method', sa.Text(), nullable=True, comment='Method to verify implementation'),
    sa.Column('monitoring_required', sa.Boolean(), nullable=False, comment='Whether ongoing monitoring is required'),
    sa.Column('success_criteria', sa.JSON(), nullable=True, comment='Success criteria for implementation'),
    sa.Column('recommendation_metadata', sa.JSON(), nullable=True, comment='Additional metadata in JSON format'),
    sa.Column('scan_id', sa.UUID(), nullable=False, comment='ID of the scan that generated this recommendation'),
    sa.Column('policy_id', sa.UUID(), nullable=True, comment='ID of the related policy (if applicable)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft deleted'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic locking'),
    sa.ForeignKeyConstraint(['policy_id'], ['policy.id'], ),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_recommendation_assigned_to'), 'recommendation', ['assigned_to'], unique=False)
    op.create_index(op.f('ix_recommendation_category'), 'recommendation', ['category'], unique=False)
    op.create_index(op.f('ix_recommendation_completed_at'), 'recommendation', ['completed_at'], unique=False)
    op.create_index(op.f('ix_recommendation_created_at'), 'recommendation', ['created_at'], unique=False)
    op.create_index(op.f('ix_recommendation_cve_id'), 'recommendation', ['cve_id'], unique=False)
    op.create_index(op.f('ix_recommendation_deleted_at'), 'recommendation', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_recommendation_due_date'), 'recommendation', ['due_date'], unique=False)
    op.create_index(op.f('ix_recommendation_framework'), 'recommendation', ['framework'], unique=False)
    op.create_index(op.f('ix_recommendation_id'), 'recommendation', ['id'], unique=False)
    op.create_index(op.f('ix_recommendation_implementation_status'), 'recommendation', ['implementation_status'], unique=False)
    op.create_index(op.f('ix_recommendation_policy_id'), 'recommendation', ['policy_id'], unique=False)
    op.create_index(op.f('ix_recommendation_priority'), 'recommendation', ['priority'], unique=False)
    op.create_index(op.f('ix_recommendation_recommendation_type'), 'recommendation', ['recommendation_type'], unique=False)
    op.create_index(op.f('ix_recommendation_scan_id'), 'recommendation', ['scan_id'], unique=False)
    op.create_index(op.f('ix_recommendation_severity'), 'recommendation', ['severity'], unique=False)
    op.create_index(op.f('ix_recommendation_subcategory'), 'recommendation', ['subcategory'], unique=False)
    op.create_index(op.f('ix_recommendation_title'), 'recommendation', ['title'], unique=False)
    op.create_index(op.f('ix_recommendation_updated_at'), 'recommendation', ['updated_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_recommendation_updated_at'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_title'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_subcategory'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_severity'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_scan_id'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_recommendation_type'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_priority'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_policy_id'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_implementation_status'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_id'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_framework'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_due_date'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_deleted_at'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_cve_id'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_created_at'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_completed_at'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_category'), table_name='recommendation')
    op.drop_index(op.f('ix_recommendation_assigned_to'), table_name='recommendation')
    op.drop_table('recommendation')
    op.drop_index(op.f('ix_policy_updated_at'), table_name='policy')
    op.drop_index(op.f('ix_policy_subcategory'), table_name='policy')
    op.drop_index(op.f('ix_policy_source'), table_name='policy')
    op.drop_index(op.f('ix_policy_scan_id'), table_name='policy')
    op.drop_index(op.f('ix_policy_risk_score'), table_name='policy')
    op.drop_index(op.f('ix_policy_risk_level'), table_name='policy')
    op.drop_index(op.f('ix_policy_resource_type'), table_name='policy')
    op.drop_index(op.f('ix_policy_resource_id'), table_name='policy')
    op.drop_index(op.f('ix_policy_principal_id'), table_name='policy')
    op.drop_index(op.f('ix_policy_policy_type'), table_name='policy')
    op.drop_index(op.f('ix_policy_parent_policy_id'), table_name='policy')
    op.drop_index(op.f('ix_policy_next_review_date'), table_name='policy')
    op.drop_index(op.f('ix_policy_name'), table_name='policy')
    op.drop_index(op.f('ix_policy_last_analyzed_at'), table_name='policy')
    op.drop_index(op.f('ix_policy_is_active'), table_name='policy')
    op.drop_index(op.f('ix_policy_id'), table_name='policy')
    op.drop_index(op.f('ix_policy_external_id'), table_name='policy')
    op.drop_index(op.f('ix_policy_effect'), table_name='policy')
    op.drop_index(op.f('ix_policy_deleted_at'), table_name='policy')
    op.drop_index(op.f('ix_policy_created_at'), table_name='policy')
    op.drop_index(op.f('ix_policy_compliance_status'), table_name='policy')
    op.drop_index(op.f('ix_policy_compliance_score'), table_name='policy')
    op.drop_index(op.f('ix_policy_category'), table_name='policy')
    op.drop_table('policy')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_updated_at'), table_name='user')
    op.drop_index(op.f('ix_user_status'), table_name='user')
    op.drop_index(op.f('ix_user_session_token'), table_name='user')
    op.drop_index(op.f('ix_user_role'), table_name='user')
    op.drop_index(op.f('ix_user_provider_id'), table_name='user')
    op.drop_index(op.f('ix_user_last_login_at'), table_name='user')
    op.drop_index(op.f('ix_user_is_active'), table_name='user')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_index(op.f('ix_user_deleted_at'), table_name='user')
    op.drop_index(op.f('ix_user_created_by'), table_name='user')
    op.drop_index(op.f('ix_user_created_at'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_scan_updated_at'), table_name='scan')
    op.drop_index(op.f('ix_scan_target_resource_id'), table_name='scan')
    op.drop_index(op.f('ix_scan_status'), table_name='scan')
    op.drop_index(op.f('ix_scan_started_at'), table_name='scan')
    op.drop_index(op.f('ix_scan_scheduled_at'), table_name='scan')
    op.drop_index(op.f('ix_scan_scan_type'), table_name='scan')
    op.drop_index(op.f('ix_scan_risk_score'), table_name='scan')
    op.drop_index(op.f('ix_scan_priority'), table_name='scan')
    op.drop_index(op.f('ix_scan_parent_scan_id'), table_name='scan')
    op.drop_index(op.f('ix_scan_name'), table_name='scan')
    op.drop_index(op.f('ix_scan_id'), table_name='scan')
    op.drop_index(op.f('ix_scan_external_scan_id'), table_name='scan')
    op.drop_index(op.f('ix_scan_deleted_at'), table_name='scan')
    op.drop_index(op.f('ix_scan_created_by'), table_name='scan')
    op.drop_index(op.f('ix_scan_created_at'), table_name='scan')
    op.drop_index(op.f('ix_scan_compliance_score'), table_name='scan')
    op.drop_index(op.f('ix_scan_completed_at'), table_name='scan')
    op.drop_table('scan')
    # ### end Alembic commands ###
