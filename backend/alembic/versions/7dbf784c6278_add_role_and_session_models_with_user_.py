"""Add Role and Session models with user_roles association

Revision ID: 7dbf784c6278
Revises: 0e4c34798957
Create Date: 2025-10-25 19:51:27.791815

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7dbf784c6278'
down_revision: Union[str, None] = '0e4c34798957'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
    sa.Column('name', sa.String(length=50), nullable=False, comment="Unique role name (e.g., 'Admin', 'Analyst', 'Viewer')"),
    sa.Column('display_name', sa.String(length=100), nullable=False, comment='Human-readable role name for UI display'),
    sa.Column('description', sa.Text(), nullable=True, comment='Role description and purpose'),
    sa.Column('permissions', sa.Text(), nullable=True, comment="JSON array of permission strings (e.g., ['read', 'write', 'delete'])"),
    sa.Column('is_system_role', sa.Boolean(), nullable=False, comment='Whether role is system-defined (cannot be deleted)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether role is active and can be assigned to users'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft deleted'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic locking'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_role_created_at'), 'role', ['created_at'], unique=False)
    op.create_index(op.f('ix_role_deleted_at'), 'role', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_index(op.f('ix_role_is_active'), 'role', ['is_active'], unique=False)
    op.create_index(op.f('ix_role_name'), 'role', ['name'], unique=True)
    op.create_index(op.f('ix_role_updated_at'), 'role', ['updated_at'], unique=False)
    op.create_table('session',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID this session belongs to'),
    sa.Column('token_jti', sa.String(length=255), nullable=False, comment='JWT Token ID (jti claim) for access token identification'),
    sa.Column('refresh_token_jti', sa.String(length=255), nullable=True, comment='Refresh token JTI for token rotation and refresh flow'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address where session was created'),
    sa.Column('user_agent', sa.String(length=500), nullable=True, comment='User agent string for device identification'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='Session expiration timestamp (matches access token expiry)'),
    sa.Column('is_revoked', sa.Boolean(), nullable=False, comment='Whether session has been revoked (logout or security event)'),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when session was revoked'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp of last activity in this session (for idle timeout)'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier for the record'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the record was last updated'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when the record was soft deleted'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number for optimistic locking'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_session_created_at'), 'session', ['created_at'], unique=False)
    op.create_index(op.f('ix_session_deleted_at'), 'session', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_session_expires_at'), 'session', ['expires_at'], unique=False)
    op.create_index(op.f('ix_session_id'), 'session', ['id'], unique=False)
    op.create_index(op.f('ix_session_is_revoked'), 'session', ['is_revoked'], unique=False)
    op.create_index(op.f('ix_session_refresh_token_jti'), 'session', ['refresh_token_jti'], unique=True)
    op.create_index(op.f('ix_session_token_jti'), 'session', ['token_jti'], unique=True)
    op.create_index(op.f('ix_session_updated_at'), 'session', ['updated_at'], unique=False)
    op.create_index(op.f('ix_session_user_id'), 'session', ['user_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID in the user-role relationship'),
    sa.Column('role_id', sa.UUID(), nullable=False, comment='Role ID in the user-role relationship'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_session_user_id'), table_name='session')
    op.drop_index(op.f('ix_session_updated_at'), table_name='session')
    op.drop_index(op.f('ix_session_token_jti'), table_name='session')
    op.drop_index(op.f('ix_session_refresh_token_jti'), table_name='session')
    op.drop_index(op.f('ix_session_is_revoked'), table_name='session')
    op.drop_index(op.f('ix_session_id'), table_name='session')
    op.drop_index(op.f('ix_session_expires_at'), table_name='session')
    op.drop_index(op.f('ix_session_deleted_at'), table_name='session')
    op.drop_index(op.f('ix_session_created_at'), table_name='session')
    op.drop_table('session')
    op.drop_index(op.f('ix_role_updated_at'), table_name='role')
    op.drop_index(op.f('ix_role_name'), table_name='role')
    op.drop_index(op.f('ix_role_is_active'), table_name='role')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_index(op.f('ix_role_deleted_at'), table_name='role')
    op.drop_index(op.f('ix_role_created_at'), table_name='role')
    op.drop_table('role')
    # ### end Alembic commands ###
